#+TITLE: Nexus

These notes are sparse at the moment.

** Modes

Nexus has three modes: /Edit/, /Presentation/, and /Record/. /Edit/ is the main mode.

** Edit mode

The main window shows the map which has a central topic, and branches made up of stems. Each child stem has a position, scale and rotation  /relative to its parent/. Stems can contain text, images, or pen writing.

*** Interaction

Since Nexus will run on a variety of touch-screens, tablets and desktops, there are multiple ways to do most operations to try and match natural inputs with different devices like mouse, touch or pen.

**** Zooming in and out of the map
- Ctrl and drag on background
- Ctrl and mouse wheel
- Pinch gesture
- Click on zoom controls in toolbar

**** Selecting stems
- Mouse click to select, shift-click to add/remove from selection, click on background to deselect all.
- =c= adds children to selection.
- =e= adds siblings to selection.
- =a= selects all/none.

**** Scaling stems
- Select stems and press =+= / =-=
- Select stens and press =s= for dialog to set stem scale

**** Moving branches
- Select and drag. N.B. moving or scaling a parent stem will affect all children as transformations are relative
- Branches will flip over when crossing mid-line.

**** Adding child stems
- Once a stem is selected a =+= button becomes visible near tip of stem, drag this out to form a new branch.
- Ctlr-click and drag on a stem.
- Use the 2nd-mouse button and click and drag on a stem.

**** Showing and hiding child stems
- Use the small =-= / =+= icon at the tip of the parent stem
- Select stem and press =h= to hide (can be re-shown with the button on the parent)

**** Rotating view
- Select =Allow Rotations= in =View= menu, then use rotation gestures on input device,
- Any stored views will also be rotated,
- Adding rotations to presentations is probably nausea inducing.

**** Edit current stem
- Double click
- Select stem then press menu icon near the base of the stem, choose =Edit=.

*** Editing dialog
- Press exit button (far left on toolbar) to close, or press =Esc= key.
- The dialog position is remembered.
- The Gear icon switches to branch settings view (setting scale, color, tags etc, and dialog properties)
- The dialog has 5 modes - /Text/, /Pen/, /Highlighter/, /Eraser/, /Select/.
- If a tablet pen is configured correctly, the eraser is automatically selected when used
- The setting =Allow Canvas Rotation= in the dialog settings lets you rotate the dialog canvas. This does not effect the stem. Usfeful for using a stylus on a laptop.
- The setting =Dialog Appearance= in the dialog settings switches between the input dialog acting as a normal window, a maximised window, and a full screen window. Exactly what this means depends on your platform and window manager.
- The dialog can also be made translucent. Sometimes useful, but depends on platform and window manager.


*** Views / Frames

What is seen on the main window with a given position and zoom factor is called a view. Views can be stored as 'frames' for a bookmark or for presentations.

- The frames that are set can be seen by toggling the =i= icon in the toolbar or using =Cmd-I=. This will show a side panel with the frames.
- Pressing the =+= button on the side panel will add the current view as a frame, the =-= button removes selected frames, and the circle button will replace the selected frame with the current view on the main window.
- Double clicking on a frame with jump to that view
- Selecting =Show Frames= in the =View= menu will show selected frames on the main screen as rectangles and can be edited (moved and scaled)
- Note the views are set so that the *width* is guaranteed to be shown on the presenting device (which might have a different aspect ratio)
- An arrow is shown on displayed frames to indicate up direction (the map view can be rotated before capturing the frame).


** Presentation mode

To be done

** Record mode

To be done

** File format

(Needs updating)

The file format for /Nexus/ is an sqlite database structured as a graph database using ~graphydb~. You could access the data using ~graphydb~, or directly to write converters. The structure is given below.

*** Graph structure

    # CONNECTIONS
    # View -Transition-> View

As the graph is using ~graphydb~, all nodes and edges  have the following attributes:

| key   | description           |
|-------+-----------------------|
| kind  | The kind of Node/Edge |
| uid   | A uniques random id   |
| ctime | Creation time         |
| mtime | Modification time     |

Nodes may have additional attributes (see below).

In addition, Edges have the following and no additional attributes:

| key      | description               |
|----------+---------------------------|
| startuid | The uid of the start node |
| enduid   | The uid of the end node   |


**** Root

Each graph has a single root (assumed) node of kind ~Root~ from which everything
else is linked. No internal data on Root.

Links: ~Root-Child->Stem~

**** Stem

Stems hold the basic structure of the map as a DAG.

| key           | description           |
|---------------+-----------------------|
| [iconified]   | True,False            |
| scale         | scaling factor        |
| z             |                       |
| flip          | 0,1                   |
| pos           | [x,y]                 |
| tags          | List of strings       |
| [branchcolor] | hex color string      |
| content       | List of content items |

Links: ~Stem-Child->Stem~, ~Root-Child->Stem~, ~Stem-With->ImageData~.

The content attribute is a list of dicts. Each has a 'kind' key with the following kinds:

***** Stroke

| key     | description    |
|---------+----------------|
| color   | hex string     |
| opacity | 0-1            |
| type    | XYZ            |
| width   |                |
| stroke  | list of tuples |
| frame   |                |

***** Text

| key      | description |
|----------+-------------|
| source   |             |
| maxwidth |             |
| frame    |             |

***** Image

| key   | description |
|-------+-------------|
| frame |             |
| sha1  |             |

**** ImageData

| key  | description            |
|------+------------------------|
| data | The data for the image |
| sha1 | A hash for the image   |

Links: ~Stem-With->ImageData~

**** View

| key   | description                 |
|-------+-----------------------------|
| left  | The mid-left point of view  |
| right | The mid-right point of view |

Links: ~View-Transition->View~

By encoding the left and right points, the view position, scale, rotation can be encoded in a way that handles displaying on different aspect ratios in a predictable manner.

** Copy format

(Needs updating)

The copy format that is used internally is a cut-down version of the nodes and content json data and is self-contained so stems can be copied across different maps. You can also write scripts that accept and interpret the embedded data.

UIDs are not stored, neither are local fields beginning with underscore '_'
Child Stems are nested in 'children' list.
Any linked ImageData nodes are added to 'images' dict under their sha1 hashes

N.B. UIDs should be regenerated anyway on paste so no point in storing

#+begin_src python
{
  'nodes': [
      {'kind':'Stem', 'content':[...], 'children':[ {'kind':'Stem',...}, {'kind':'Stem',...} ]},
  ],
  'images':{
      'sha1':{'kind':'ImageData',...},
  }
}
#+end_src
