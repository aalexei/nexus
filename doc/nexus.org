#+TITLE: Nexus

These notes are sparse at the moment.

* Modes

Nexus has three modes: /Edit/, /Presentation/, and /Record/ mode. /Edit/ is the main mode.

* Main map

The map has a central topic, and branches made up of stems. Each child stem is scaled down relative to it's parent. You can chose to show or hide the children of a stem ( -/+ icon at the end of a stem). Stems can contain text, images, or pen writing.

** Interaction

Since it will run on a variety of touch-screens and tablets, there are multiple ways to do most operations.

*** Saving
- No need to save, the map gets saved automatically on changes.

*** Selecting
- Mouse click to select, shift-click to add to selection, click on background to deselect.
- =c= adds children to selection
- =e= adds siblings to selection
- =a= selects all

*** Moving branches
- Select and drag.
- Branches will flip over when crossing mid-line.

*** Adding sub-branches
- Once a stem is selected a =+= button becomes visible, drag this out to form a new branch.
- Ctlr-click and drag on a stem.
- Use the 2nd mouse button and click and drag on a stem.

*** Zooming in and out of the map
- Ctrl and drag on background
- Ctrl and mouse wheel
- Pinch gesture

*** Scaling stems
- Select and press =+= / =-=
- Select and press =s= for dialog to set relative scale

*** Edit current branch
- Double click
- Select branch then press menu icon, select edit.

*** Editing dialog
- Press exit button (far left on toolbar) to close, or press =Esc= key.
- Dialog position is remembered.
- Gear icon switches to branch settings view (setting scale, color, tags etc)

* Views / Frames
- The frames that are set can be seen by toggling the =i= icon or using =Cmd-I=.
- Pressing =+= button with add the current view as a frame, =-= button removes a frame, and the circle will replace the selected frame with the current view on the main window.
- Double clicking on a frame with jump to that view
- Selecting "Show Frames" will show the selected frames on the main screen as rectangle and can be edited
- Note the views are set so that the *width* is guaranteed to be shown on the presenting device (which might have a different aspect ratio)
- An arrow is shown on displayed frames to indicate vertical (the map view can be rotated before capturing the frame).


* File format

The file format for /Nexus/ is an sqlite database structured as a graph database using ~graphydb~.

** Graph structure

    # CONNECTIONS
    # View -Transition-> View

As the graph is using ~graphydb~, all nodes and edges  have the following attributes:

| key   | description           |
|-------+-----------------------|
| kind  | The kind of Node/Edge |
| uid   | A uniques random id   |
| ctime | Creation time         |
| mtime | Modification time     |

Nodes may have additional attributes (see below).

In addition, Edges have the following and no additional attributes:

| key      | description               |
|----------+---------------------------|
| startuid | The uid of the start node |
| enduid   | The uid of the end node   |


*** Root

Each graph has a single root (assumed) node of kind ~Root~ from which everything
else is linked. No internal data on Root.

Links: ~Root-Child->Stem~

*** Stem

Stems hold the basic structure of the map as a DAG.

| key           | description           |
|---------------+-----------------------|
| [iconified]   | True,False            |
| scale         | scaling factor        |
| z             |                       |
| flip          | 0,1                   |
| pos           | [x,y]                 |
| tags          | List of strings       |
| [branchcolor] | hex color string      |
| content       | List of content items |

Links: ~Stem-Child->Stem~, ~Root-Child->Stem~, ~Stem-With->ImageData~.

The content attribute is a list of dicts. Each has a 'kind' key with the following kinds:

**** Stroke

| key     | description    |
|---------+----------------|
| color   | hex string     |
| opacity | 0-1            |
| type    | XYZ            |
| width   |                |
| stroke  | list of tuples |
| frame   |                |

**** Text

| key      | description |
|----------+-------------|
| source   |             |
| maxwidth |             |
| frame    |             |

**** Image

| key   | description |
|-------+-------------|
| frame |             |
| sha1  |             |

*** ImageData

| key  | description            |
|------+------------------------|
| data | The data for the image |
| sha1 | A hash for the image   |

Links: ~Stem-With->ImageData~

*** View

| key   | description                 |
|-------+-----------------------------|
| left  | The mid-left point of view  |
| right | The mid-right point of view |

Links: ~View-Transition->View~

By encoding the left and right points, the view position, scale, rotation can be encoded in a way that handles displaying on different aspect ratios in a predictable manner.

* Copy format

The copy format that is used internally is a cut-down version of the nodes and content json data.
UIDs are not stored, neither are local fields beginning with underscore '_'
Child Stems are nested in 'children' list.
Any linked ImageData nodes are added to 'images' dict under their sha1 hashes

N.B. UIDs should be regenerated anyway on paste so no point in storing

#+begin_src python
{
  'nodes': [
      {'kind':'Stem', 'content':[...], 'children':[ {'kind':'Stem',...}, {'kind':'Stem',...} ]},
  ],
  'images':{
      'sha1':{'kind':'ImageData',...},
  }
}
#+end_src
