#+TITLE: Nexus

/Nexus/ is a mindmapping app that supports text, images and stylus input. It will
run on Mac, Windows, and Linux. It's been mainly tested on mac and linux.

* Installation

- python3
- pyqt5
- bs4
- bleach

- apsw (install from https://rogerbinns.github.io/apsw/)


* Main map
** Interaction

There are multiple overlapping ways to move and add items. 

*** Moving branches

Click and drag

*** Adding sub-branches

Ctlr-click and drag
2nd mouse button and drag
Long press and drag

*** Zoom

Ctrl and drag on background
Ctrl and mouse wheel
Pinch gesture

*** Edit current branch

Double click
Longpress then select edit

* File format

The file format for /Nexus/ is an sqlite database structured as a graph database
using ~graphydb~.

** Graph structure

    # CONNECTIONS
    # View -Transition-> View

As the graph is using ~graphydb~, all nodes and edges  have the following attributes:

| key   | description           |
|-------+-----------------------|
| kind  | The kind of Node/Edge |
| uid   | A uniques random id   |
| ctime | Creation time         |
| mtime | Modification time     |

Nodes may have additional attributes (see below).

In addition, Edges have the following and no additional attributes:

| key      | description               |
|----------+---------------------------|
| startuid | The uid of the start node |
| enduid   | The uid of the end node   |


*** Root

Each graph has a single root (assumed) node of kind ~Root~ from which everything
else is linked. No internal data on Root.

Links: ~Root-Child->Stem~

*** Stem

Stems hold the basic structure of the map as a DAG.

| key           | description           |
|---------------+-----------------------|
| [iconified]   | True,False            |
| scale         | scaling factor        |
| z             |                       |
| flip          | 0,1                   |
| pos           | [x,y]                 |
| tags          | List of strings       |
| [branchcolor] | hex color string      |
| content       | List of content items |

Links: ~Stem-Child->Stem~, ~Root-Child->Stem~, ~Stem-With->ImageData~.

The content attribute is a list of dicts. Each has a 'kind' key with the following kinds:

**** Stroke

| key     | description    |
|---------+----------------|
| color   | hex string     |
| opacity | 0-1            |
| type    | XYZ            |
| width   |                |
| stroke  | list of tuples |
| frame   |                |

**** Text

| key      | description |
|----------+-------------|
| source   |             |
| maxwidth |             |
| frame    |             |

**** Image

| key   | description |
|-------+-------------|
| frame |             |
| sha1  |             |

*** ImageData

| key  | description            |
|------+------------------------|
| data | The data for the image |
| sha1 | A hash for the image   |

Links: ~Stem-With->ImageData~

*** View

| key   | description                 |
|-------+-----------------------------|
| left  | The mid-left point of view  |
| right | The mid-right point of view |

Links: ~View-Transition->View~

By encoding the left and right points, the view position, scale, rotation can be encoded in a way that handles displaying on different aspect ratios in a predictable manner.

* Copy format

The copy format that is used internally is a cut-down version of the nodes and content.
Links to both child Stems or ImageData are nested in 'children' list.

#+begin_src python
[
    {'kind':'Stem', 'content':[...], 'children':[]},
    {'kind':'Stem', 'content':[...]},
]
#+end_src
