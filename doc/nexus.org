#+TITLE: Nexus

These notes are sparse at the moment.

* Main map

** Interaction

Since it will run on a variety of touch-screens and tablets, there are multiple ways to do most operations.

*** Saving

- The map gets saved automatically on changes

*** Moving branches

- Click and drag
*** Adding sub-branches

- Once selected a '+' button becomes visible, drag this out to form a new branch.
- Ctlr-click and drag.
- Use the 2nd mouse button and click and drag.

*** Zooming in and out of the map

- Ctrl and drag on background
- Ctrl and mouse wheel
- Pinch gesture

*** Edit current branch

- Double click
- Select branch then press menu icon, select edit.

*** Close editing dialog

- Press Esc

* File format

The file format for /Nexus/ is an sqlite database structured as a graph database using ~graphydb~.

** Graph structure

    # CONNECTIONS
    # View -Transition-> View

As the graph is using ~graphydb~, all nodes and edges  have the following attributes:

| key   | description           |
|-------+-----------------------|
| kind  | The kind of Node/Edge |
| uid   | A uniques random id   |
| ctime | Creation time         |
| mtime | Modification time     |

Nodes may have additional attributes (see below).

In addition, Edges have the following and no additional attributes:

| key      | description               |
|----------+---------------------------|
| startuid | The uid of the start node |
| enduid   | The uid of the end node   |


*** Root

Each graph has a single root (assumed) node of kind ~Root~ from which everything
else is linked. No internal data on Root.

Links: ~Root-Child->Stem~

*** Stem

Stems hold the basic structure of the map as a DAG.

| key           | description           |
|---------------+-----------------------|
| [iconified]   | True,False            |
| scale         | scaling factor        |
| z             |                       |
| flip          | 0,1                   |
| pos           | [x,y]                 |
| tags          | List of strings       |
| [branchcolor] | hex color string      |
| content       | List of content items |

Links: ~Stem-Child->Stem~, ~Root-Child->Stem~, ~Stem-With->ImageData~.

The content attribute is a list of dicts. Each has a 'kind' key with the following kinds:

**** Stroke

| key     | description    |
|---------+----------------|
| color   | hex string     |
| opacity | 0-1            |
| type    | XYZ            |
| width   |                |
| stroke  | list of tuples |
| frame   |                |

**** Text

| key      | description |
|----------+-------------|
| source   |             |
| maxwidth |             |
| frame    |             |

**** Image

| key   | description |
|-------+-------------|
| frame |             |
| sha1  |             |

*** ImageData

| key  | description            |
|------+------------------------|
| data | The data for the image |
| sha1 | A hash for the image   |

Links: ~Stem-With->ImageData~

*** View

| key   | description                 |
|-------+-----------------------------|
| left  | The mid-left point of view  |
| right | The mid-right point of view |

Links: ~View-Transition->View~

By encoding the left and right points, the view position, scale, rotation can be encoded in a way that handles displaying on different aspect ratios in a predictable manner.

* Copy format

The copy format that is used internally is a cut-down version of the nodes and content json data.
UIDs are not stored, neither are local fields beginning with underscore '_'
Child Stems are nested in 'children' list.
Any linked ImageData nodes are added to 'images' dict under their sha1 hashes

N.B. UIDs should be regenerated anyway on paste so no point in storing

#+begin_src python
{
  'nodes': [
      {'kind':'Stem', 'content':[...], 'children':[ {'kind':'Stem',...}, {'kind':'Stem',...} ]},
  ],
  'images':{
      'sha1':{'kind':'ImageData',...},
  }
}
#+end_src
