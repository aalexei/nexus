#+TITLE: Nexus

Unleash your creativity with Nexus, the ultimate mind mapping app that goes beyond traditional boundaries. Integrate text, images, and pen input for dynamic and interactive brainstorming. Available on Mac, Windows, and Linux, Nexus transforms note-taking and presentations with features like branch customization, scalable content, and innovative key-framing for smooth navigation. Export your ideas to PDF or interactive SVG files, and captivate audiences with its presentation mode. Record and share presentation with integrated audio and video capabilities, or stream your sessions live. With robust pen support across various devices, Nexus empowers you to think, create, and present like never before. Dive into the future of mind mapping today!

Features:
1. It has been tested and used regularly on Mac, Windows, and Linux, and has been extensively used for notetaking and delivering presentations.
1. Branches can be places anywhere, partially closed, scaled, coloured and tagged.
1. Branch contents (text, images or pen strokes) can be scaled, rotated and moved.
1. It is possible to key-frame locations and zoom level, and jump back. They can be edited later.
1. Can export map to PDF (whole map, or frames as individual pages) or SVG with embedded JS to implement zoom and pan.
1. Has a presentation mode that can play back frames, move arbitrarily, and show a transient pointer or trail.
1. Has a recording mode that records audio and generates compact video of movement around map (requires ~ffmpeg~).
1. Can stream the movement and pointer on localhost (which can then be mixed with live video using OBS for example)
1. Automatically saves changes and has undo buffer.
1. Pen input supported on Windows, Linux tablets, Wacom tablets, Mac using Sidecar with iPad.

* Installation

Requirements:
- python3
- pyqt6
- bs4
- bleach
- apsw (https://rogerbinns.github.io/apsw/)
- If you want to generate movies, you will also need to install ~ffmpeg~ (https://www.ffmpeg.org/)

To install and run from source (assuming a shell running bash or equivalent)
- Create project directory
  : mkdir nexus; cd nexus
- Get the source from github
  : git clone https://github.com/aalexei/nexus.git nexus-github
- Create a virtual python environment
  : python3 -m venv nexus-env
- Activate it
  : ./nexus-env/bin/activate
- Install requirements
  : pip install pyqt6 bs4 bleach apsw
- Launch Nexus
  : ./nexus-github/runnexus.py
- Enjoy

* Main map
** Interaction

Since it will run on a variety of touch-screens and tablets, there are multiple ways to do most operations.

*** Saving

- The map gets saved automatically on changes

*** Moving branches

- Click and drag
*** Adding sub-branches

- Once selected a '+' button becomes visible, drag this out to form a new branch.
- Ctlr-click and drag.
- Use the 2nd mouse button and click and drag.

*** Zooming in and out of the map

- Ctrl and drag on background
- Ctrl and mouse wheel
- Pinch gesture

*** Edit current branch

- Double click
- Select branch then press menu icon, select edit.

*** Close editing dialog

- Press Esc

* File format

The file format for /Nexus/ is an sqlite database structured as a graph database using ~graphydb~.

** Graph structure

    # CONNECTIONS
    # View -Transition-> View

As the graph is using ~graphydb~, all nodes and edges  have the following attributes:

| key   | description           |
|-------+-----------------------|
| kind  | The kind of Node/Edge |
| uid   | A uniques random id   |
| ctime | Creation time         |
| mtime | Modification time     |

Nodes may have additional attributes (see below).

In addition, Edges have the following and no additional attributes:

| key      | description               |
|----------+---------------------------|
| startuid | The uid of the start node |
| enduid   | The uid of the end node   |


*** Root

Each graph has a single root (assumed) node of kind ~Root~ from which everything
else is linked. No internal data on Root.

Links: ~Root-Child->Stem~

*** Stem

Stems hold the basic structure of the map as a DAG.

| key           | description           |
|---------------+-----------------------|
| [iconified]   | True,False            |
| scale         | scaling factor        |
| z             |                       |
| flip          | 0,1                   |
| pos           | [x,y]                 |
| tags          | List of strings       |
| [branchcolor] | hex color string      |
| content       | List of content items |

Links: ~Stem-Child->Stem~, ~Root-Child->Stem~, ~Stem-With->ImageData~.

The content attribute is a list of dicts. Each has a 'kind' key with the following kinds:

**** Stroke

| key     | description    |
|---------+----------------|
| color   | hex string     |
| opacity | 0-1            |
| type    | XYZ            |
| width   |                |
| stroke  | list of tuples |
| frame   |                |

**** Text

| key      | description |
|----------+-------------|
| source   |             |
| maxwidth |             |
| frame    |             |

**** Image

| key   | description |
|-------+-------------|
| frame |             |
| sha1  |             |

*** ImageData

| key  | description            |
|------+------------------------|
| data | The data for the image |
| sha1 | A hash for the image   |

Links: ~Stem-With->ImageData~

*** View

| key   | description                 |
|-------+-----------------------------|
| left  | The mid-left point of view  |
| right | The mid-right point of view |

Links: ~View-Transition->View~

By encoding the left and right points, the view position, scale, rotation can be encoded in a way that handles displaying on different aspect ratios in a predictable manner.

* Copy format

The copy format that is used internally is a cut-down version of the nodes and content json data.
UIDs are not stored, neither are local fields beginning with underscore '_'
Child Stems are nested in 'children' list.
Any linked ImageData nodes are added to 'images' dict under their sha1 hashes

N.B. UIDs should be regenerated anyway on paste so no point in storing

#+begin_src python
{
  'nodes': [
      {'kind':'Stem', 'content':[...], 'children':[ {'kind':'Stem',...}, {'kind':'Stem',...} ]},
  ],
  'images':{
      'sha1':{'kind':'ImageData',...},
  }
}
#+end_src
